# -*- coding: utf-8 -*-
"""fertility.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RXaS2iQvEFgqJhjBCZtrIKlizd2lyWY1
"""

import numpy as np
import pandas as pd
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import accuracy_score,precision_score, recall_score,f1_score,confusion_matrix
from matplotlib import pyplot as plt
import re

df=pd.read_csv('/content/drive/My Drive/fertility_Diagnosis.txt',header = None)

from google.colab import drive
drive.mount('/content/drive')

df.columns=["Season","Age","Childish diseases","Accident or serious trauma","Surgical intervention","High fevers in the last year","Frequency of alcohol consumption","Smoking habit","Number of hours spent sitting per day","Diagnosis"]
df.to_csv('fertility_Diagnosis.csv', index = None)

df

df.describe()

sns.boxplot(data=df,palette='rainbow',orient='h')

a=df.corr()

sns.heatmap(a,annot=True)

sns.countplot(x="Accident or serious trauma",data=df)

df.columns

sns.countplot(x="Surgical intervention",data=df)

sns.countplot(x="High fevers in the last year",data=df)

sns.countplot(x="Frequency of alcohol consumption",data=df)

sns.countplot(x="Smoking habit",data=df)

sns.countplot(x="Number of hours spent sitting per day",data=df)

sns.pairplot(df,hue="Diagnosis",palette='coolwarm')

sns.barplot(x="Age",y="",data=df)

sns.heatmap(df.isnull(),yticklabels=False,cmap="viridis")

from sklearn.model_selection import train_test_split

df.info()

df.columns

x=df[["Childish diseases","Accident or serious trauma","Surgical intervention","High fevers in the last year","Frequency of alcohol consumption","Smoking habit","Number of hours spent sitting per day"]]
y=df["Diagnosis"]

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=101)

from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report

log=LogisticRegression()

log=LogisticRegression()

log.fit(x_train,y_train)

predict=log.predict(x_test)

confusion_matrix(y_test,predict)

accuracy_score(y_test,predict)

print(classification_report(y_test,predict))

x=df[["Childish diseases","Accident or serious trauma","Surgical intervention","High fevers in the last year","Frequency of alcohol consumption","Smoking habit","Number of hours spent sitting per day"]]
y=df["Diagnosis"]

pre=log.predict([[0,1,1,0,0.8,0,0.88]])
pre







